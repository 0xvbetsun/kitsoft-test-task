openapi: 3.0.0
info:
  title: KitSoft Test API
  description: REST API for KitSoft Test Project
  termsOfService: ''
  contact:
    email: vlad.betcun@gmail.com
  version: v1.0
servers:
  - url: http://localhost:8080/api
    description: Test server
paths:
  /test/ping:
    get:
      tags:
        - System
      summary: Checks server availability
      description: Get information of server availability and request duration
      responses:
        200:
          description: Successful fetching data
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: string
                    example: pong
                  meta:
                    type: object
                    properties:
                      handlingTime:
                        type: number
                        format: float
                        example: 123.456
        404:
          $ref: '#components/responses/404'
        405:
          $ref: '#components/responses/405'
  /file/{fileName}:
    parameters:
      - $ref: '#components/parameters/FileName'
    get:
      tags:
        - Storage
      summary: Download file
      description: Download decrypted file from the server
      responses:
        200:
          description: Successful downloading
          content:
            '*/*':
              schema:
                type: string
                format: binary
        404:
          $ref: '#components/responses/404'
        405:
          $ref: '#components/responses/405'
    post:
      tags:
        - Storage
      summary: Upload file
      description: Upload file from the server
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        204:
          description: Successful uploading
          content:
            application/json:
              schema: {}
        404:
          $ref: '#components/responses/404'
        405:
          $ref: '#components/responses/405'
        409:
          $ref: '#components/responses/405'
        422:
          $ref: '#components/responses/405'
  /redirect/{url}:
    parameters:
      - $ref: '#components/parameters/URL'
    get:
      tags:
        - Delegation
      summary: Redirect to url
      description: Redirect to url what passed in query path
      responses:
        302:
          description: Successful downloading
          content:
            '*/*':
              schema: {}
        422:
          $ref: '#components/responses/422'
    post:
      tags:
        - Delegation
      summary: Redirect to url
      description: Redirect to url what passed in query path
      responses:
        302:
          description: Successful downloading
          content:
            '*/*':
              schema: {}
        422:
          $ref: '#components/responses/422'
    put:
      tags:
        - Delegation
      summary: Redirect to url
      description: Redirect to url what passed in query path
      responses:
        302:
          description: Successful downloading
          content:
            '*/*':
              schema: {}
        422:
          $ref: '#components/responses/422'
    patch:
      tags:
        - Delegation
      summary: Redirect to url
      description: Redirect to url what passed in query path
      responses:
        302:
          description: Successful downloading
          content:
            '*/*':
              schema: {}
        422:
          $ref: '#components/responses/422'
    delete:
      tags:
        - Delegation
      summary: Redirect to url
      description: Redirect to url what passed in query path
      responses:
        302:
          description: Successful downloading
          content:
            '*/*':
              schema: {}
        422:
          $ref: '#components/responses/422'
  /proxy/{url}:
    parameters:
      - $ref: '#components/parameters/URL'
    get:
      tags:
        - Delegation
      summary: Proxy from url
      description: Proxy from url what passed in query path
      responses:
        200:
          description: Successful proxy
          content:
            '*/*':
              schema: {}
        422:
          $ref: '#components/responses/422'
    post:
      tags:
        - Delegation
      summary: Proxy from url
      description: Proxy from url what passed in query path
      responses:
        200:
          description: Successful proxy
          content:
            '*/*':
              schema: {}
        422:
          $ref: '#components/responses/422'
    put:
      tags:
        - Delegation
      summary: Proxy from url
      description: Proxy from url what passed in query path
      responses:
        200:
          description: Successful proxy
          content:
            '*/*':
              schema: {}
        422:
          $ref: '#components/responses/422'
    patch:
      tags:
        - Delegation
      summary: Proxy from url
      description: Proxy from url what passed in query path
      responses:
        200:
          description: Successful proxy
          content:
            '*/*':
              schema: {}
        422:
          $ref: '#components/responses/422'
    delete:
      tags:
        - Delegation
      summary: Proxy from url
      description: Proxy from url what passed in query path
      responses:
        200:
          description: Successful proxy
          content:
            '*/*':
              schema: {}
        422:
          $ref: '#components/responses/422'

components:
  schemas:
    Error:
      properties:
        message:
          type: string
  responses:
    404:
      description: 'Requested Resource not found'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: 'Not Found'
    405:
      description: 'Method Not Allowed'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: 'Method Not Allowed'
    409:
      description: 'Conflict'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: 'Conflict'
    422:
      description: 'Unprocessable Entity'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: 'Unprocessable Entity'
  parameters:
    FileName:
      name: fileName
      in: path
      required: true
      schema:
        type: string
        example: 'file-name.jpg'
    URL:
      name: url
      in: path
      required: true
      schema:
        type: string
        example: https://www.google.com
tags:
  - name: System
    description: System Endpoints
  - name: Storage
    description: Endpoints for manipulations with files
  - name: Delegation
    description: Endpoints for delegated processing
